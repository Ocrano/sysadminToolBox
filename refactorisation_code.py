#!/usr/bin/env python3
"""
Script d'analyse et de refactorisation automatique ToolboxPyQt6
Analyse les fichiers volumineux et propose/effectue une refactorisation
"""

import ast
import os
import re
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Set
from dataclasses import dataclass
from collections import defaultdict


@dataclass
class ClassInfo:
    """Information sur une classe"""
    name: str
    line_start: int
    line_end: int
    methods: List[str]
    imports_used: Set[str]
    responsibilities: List[str]


@dataclass
class FunctionInfo:
    """Information sur une fonction"""
    name: str
    line_start: int
    line_end: int
    imports_used: Set[str]
    complexity: int


@dataclass
class FileAnalysis:
    """Analyse compl√®te d'un fichier"""
    path: Path
    total_lines: int
    classes: List[ClassInfo]
    functions: List[FunctionInfo]
    imports: List[str]
    complexity_score: int
    refactoring_suggestions: List[str]


class CodeAnalyzer(ast.NodeVisitor):
    """Analyseur de code Python bas√© sur AST"""
    
    def __init__(self, source_code: str):
        self.source_lines = source_code.split('\n')
        self.imports = []
        self.classes = []
        self.functions = []
        self.current_class = None
        
    def visit_Import(self, node):
        for alias in node.names:
            self.imports.append(f"import {alias.name}")
        self.generic_visit(node)
    
    def visit_ImportFrom(self, node):
        module = node.module or ""
        names = [alias.name for alias in node.names]
        self.imports.append(f"from {module} import {', '.join(names)}")
        self.generic_visit(node)
    
    def visit_ClassDef(self, node):
        class_info = ClassInfo(
            name=node.name,
            line_start=node.lineno,
            line_end=node.end_lineno or node.lineno,
            methods=[],
            imports_used=set(),
            responsibilities=[]
        )
        
        self.current_class = class_info
        self.classes.append(class_info)
        
        # Analyser les m√©thodes
        for item in node.body:
            if isinstance(item, ast.FunctionDef):
                class_info.methods.append(item.name)
                
                # Analyser les responsabilit√©s bas√©es sur les noms de m√©thodes
                responsibilities = self._analyze_method_responsibilities(item.name)
                class_info.responsibilities.extend(responsibilities)
        
        self.generic_visit(node)
        self.current_class = None
    
    def visit_FunctionDef(self, node):
        if self.current_class is None:  # Fonction standalone
            func_info = FunctionInfo(
                name=node.name,
                line_start=node.lineno,
                line_end=node.end_lineno or node.lineno,
                imports_used=set(),
                complexity=self._calculate_complexity(node)
            )
            self.functions.append(func_info)
        
        self.generic_visit(node)
    
    def _analyze_method_responsibilities(self, method_name: str) -> List[str]:
        """Analyse les responsabilit√©s bas√©es sur le nom de la m√©thode"""
        responsibilities = []
        
        # Responsabilit√©s UI
        ui_keywords = ['init_ui', 'setup_', 'create_', 'update_', 'on_', 'show_', 'hide_', 'display_']
        if any(keyword in method_name.lower() for keyword in ui_keywords):
            responsibilities.append("UI")
        
        # Responsabilit√©s r√©seau
        network_keywords = ['ssh_', 'connect_', 'execute_', 'command_', 'network_', 'scan_']
        if any(keyword in method_name.lower() for keyword in network_keywords):
            responsibilities.append("Network")
        
        # Responsabilit√©s donn√©es
        data_keywords = ['load_', 'save_', 'import_', 'export_', 'parse_', 'format_']
        if any(keyword in method_name.lower() for keyword in data_keywords):
            responsibilities.append("Data")
        
        # Responsabilit√©s Proxmox
        proxmox_keywords = ['proxmox_', 'vm_', 'qemu_', 'agent_', 'install_']
        if any(keyword in method_name.lower() for keyword in proxmox_keywords):
            responsibilities.append("Proxmox")
        
        return responsibilities
    
    def _calculate_complexity(self, node: ast.FunctionDef) -> int:
        """Calcule la complexit√© cyclomatique approximative"""
        complexity = 1  # Base complexity
        
        for child in ast.walk(node):
            if isinstance(child, (ast.If, ast.While, ast.For, ast.Try, ast.With)):
                complexity += 1
            elif isinstance(child, ast.BoolOp):
                complexity += len(child.values) - 1
        
        return complexity


def analyze_file(file_path: Path) -> FileAnalysis:
    """Analyse un fichier Python"""
    try:
        content = file_path.read_text(encoding='utf-8')
        lines = content.split('\n')
        
        # Parser AST
        tree = ast.parse(content)
        analyzer = CodeAnalyzer(content)
        analyzer.visit(tree)
        
        # Calculer la complexit√© globale
        total_complexity = sum(func.complexity for func in analyzer.functions)
        for cls in analyzer.classes:
            total_complexity += len(cls.methods) * 2  # Approximation
        
        # G√©n√©rer des suggestions
        suggestions = generate_refactoring_suggestions(
            len(lines), analyzer.classes, analyzer.functions
        )
        
        return FileAnalysis(
            path=file_path,
            total_lines=len(lines),
            classes=analyzer.classes,
            functions=analyzer.functions,
            imports=analyzer.imports,
            complexity_score=total_complexity,
            refactoring_suggestions=suggestions
        )
        
    except Exception as e:
        print(f"‚ùå Erreur analyse {file_path}: {e}")
        return None


def generate_refactoring_suggestions(total_lines: int, classes: List[ClassInfo], functions: List[FunctionInfo]) -> List[str]:
    """G√©n√®re des suggestions de refactorisation"""
    suggestions = []
    
    # Suggestions bas√©es sur la taille
    if total_lines > 500:
        suggestions.append(f"üö® Fichier tr√®s volumineux ({total_lines} lignes) - Refactorisation recommand√©e")
    elif total_lines > 300:
        suggestions.append(f"‚ö†Ô∏è Fichier volumineux ({total_lines} lignes) - Envisager une refactorisation")
    
    # Suggestions bas√©es sur les classes
    for cls in classes:
        class_lines = cls.line_end - cls.line_start
        if class_lines > 200:
            suggestions.append(f"üîß Classe '{cls.name}' trop volumineuse ({class_lines} lignes)")
        
        if len(cls.methods) > 15:
            suggestions.append(f"üì¶ Classe '{cls.name}' a trop de m√©thodes ({len(cls.methods)})")
        
        # Analyser les responsabilit√©s multiples
        unique_responsibilities = set(cls.responsibilities)
        if len(unique_responsibilities) > 2:
            suggestions.append(f"üéØ Classe '{cls.name}' a plusieurs responsabilit√©s: {', '.join(unique_responsibilities)}")
    
    # Suggestions bas√©es sur les fonctions
    complex_functions = [f for f in functions if f.complexity > 10]
    if complex_functions:
        suggestions.append(f"üîÄ {len(complex_functions)} fonctions tr√®s complexes √† simplifier")
    
    return suggestions


def print_analysis_results(analyses: List[FileAnalysis]):
    """Affiche les r√©sultats d'analyse"""
    print("üìä R√âSULTATS D'ANALYSE")
    print("=" * 60)
    
    # Tri par nombre de lignes (desc)
    analyses.sort(key=lambda x: x.total_lines, reverse=True)
    
    print(f"\nüìã Top fichiers volumineux:")
    for i, analysis in enumerate(analyses[:10], 1):
        status = "üö®" if analysis.total_lines > 500 else "‚ö†Ô∏è" if analysis.total_lines > 300 else "‚úÖ"
        print(f"{i:2d}. {status} {analysis.path.name:<30} {analysis.total_lines:4d} lignes")
    
    print(f"\nüîç Analyse d√©taill√©e:")
    for analysis in analyses:
        if analysis.total_lines > 200:  # Seulement les gros fichiers
            print(f"\nüìÑ {analysis.path}")
            print(f"   Lignes: {analysis.total_lines}")
            print(f"   Classes: {len(analysis.classes)}")
            print(f"   Fonctions: {len(analysis.functions)}")
            print(f"   Complexit√©: {analysis.complexity_score}")
            
            if analysis.refactoring_suggestions:
                print("   Suggestions:")
                for suggestion in analysis.refactoring_suggestions:
                    print(f"     ‚Ä¢ {suggestion}")


def create_refactoring_structure(analysis: FileAnalysis) -> Dict[str, str]:
    """Cr√©e la structure de refactorisation pour un fichier"""
    suggestions = {}
    
    if "main_window" in analysis.path.name:
        suggestions = {
            "src/ui/components/connection_panel.py": "Panneau de connexion Proxmox",
            "src/ui/components/log_display.py": "Affichage des logs avec filtres", 
            "src/ui/components/tab_manager.py": "Gestionnaire d'onglets",
            "src/ui/controllers/main_controller.py": "Logique principale",
            "src/ui/controllers/proxmox_controller.py": "Contr√¥leur Proxmox",
            "src/ui/models/app_state.py": "√âtat global de l'application"
        }
    
    elif "network_tab" in analysis.path.name:
        suggestions = {
            "src/ui/tabs/network/network_ui.py": "Interface r√©seau",
            "src/ui/tabs/network/device_table.py": "Tableau des √©quipements",
            "src/ui/tabs/network/command_panel.py": "Panneau de commandes",
            "src/network/device_manager.py": "Gestion des √©quipements",
            "src/network/ssh_client.py": "Client SSH r√©utilisable",
            "src/network/command_executor.py": "Ex√©cuteur de commandes"
        }
    
    elif "proxmox_handler" in analysis.path.name:
        suggestions = {
            "src/handlers/proxmox/proxmox_client.py": "Client API Proxmox",
            "src/handlers/proxmox/vm_manager.py": "Gestion des VMs",
            "src/handlers/proxmox/node_manager.py": "Gestion des n≈ìuds",
            "src/handlers/proxmox/storage_manager.py": "Gestion du stockage",
            "src/handlers/proxmox/qemu_agent/agent_installer.py": "Installation QEMU Agent"
        }
    
    elif "qemu_agent_dialog" in analysis.path.name:
        suggestions = {
            "src/ui/dialogs/qemu_agent/qemu_agent_dialog.py": "Interface principale",
            "src/ui/dialogs/qemu_agent/ssh_credentials_dialog.py": "Dialogue credentials",
            "src/ui/dialogs/qemu_agent/vm_table_widget.py": "Tableau des VMs",
            "src/services/qemu_agent_service.py": "Service d'installation",
            "src/services/installation_thread.py": "Thread d'installation"
        }
    
    return suggestions


def extract_class_from_file(file_path: Path, class_name: str, output_path: Path) -> bool:
    """Extrait une classe vers un nouveau fichier"""
    try:
        content = file_path.read_text(encoding='utf-8')
        tree = ast.parse(content)
        
        # Trouver la classe
        class_node = None
        for node in ast.walk(tree):
            if isinstance(node, ast.ClassDef) and node.name == class_name:
                class_node = node
                break
        
        if not class_node:
            print(f"‚ùå Classe '{class_name}' non trouv√©e dans {file_path}")
            return False
        
        # Extraire le code de la classe
        lines = content.split('\n')
        class_lines = lines[class_node.lineno-1:class_node.end_lineno]
        
        # Analyser les imports n√©cessaires
        imports_needed = extract_imports_for_class(content, class_lines)
        
        # Cr√©er le nouveau fichier
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        new_content = []
        new_content.extend(imports_needed)
        new_content.append("")
        new_content.extend(class_lines)
        
        output_path.write_text('\n'.join(new_content), encoding='utf-8')
        print(f"‚úÖ Classe '{class_name}' extraite vers {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur extraction {class_name}: {e}")
        return False


def extract_imports_for_class(full_content: str, class_lines: List[str]) -> List[str]:
    """D√©termine les imports n√©cessaires pour une classe"""
    # Analyse simple bas√©e sur les mots-cl√©s trouv√©s
    class_content = '\n'.join(class_lines)
    needed_imports = []
    
    # Imports PyQt6 communs
    pyqt_widgets = ['QWidget', 'QVBoxLayout', 'QHBoxLayout', 'QLabel', 'QPushButton', 'QTableWidget', 'QMessageBox']
    pyqt_core = ['Qt', 'QThread', 'pyqtSignal']
    
    if any(widget in class_content for widget in pyqt_widgets):
        needed_imports.append("from PyQt6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton")
    
    if any(core in class_content for core in pyqt_core):
        needed_imports.append("from PyQt6.QtCore import Qt, QThread, pyqtSignal")
    
    # Autres imports sp√©cifiques trouv√©s dans le fichier original
    original_imports = []
    for line in full_content.split('\n'):
        if line.strip().startswith(('import ', 'from ')) and 'PyQt6' not in line:
            original_imports.append(line.strip())
    
    # Ajouter les imports qui semblent n√©cessaires
    for imp in original_imports:
        if any(word in class_content for word in imp.split()):
            needed_imports.append(imp)
    
    return needed_imports


def create_refactored_files(analysis: FileAnalysis) -> bool:
    """Cr√©e les fichiers refactoris√©s pour un fichier analys√©"""
    print(f"\nüîß Refactorisation de {analysis.path.name}")
    
    structure = create_refactoring_structure(analysis)
    if not structure:
        print(f"‚ö†Ô∏è Pas de structure de refactorisation d√©finie pour {analysis.path.name}")
        return False
    
    print("üìÅ Structure propos√©e:")
    for path, description in structure.items():
        print(f"   ‚Ä¢ {path:<50} - {description}")
    
    confirm = input(f"\n‚ùì Cr√©er cette structure? (o/N): ").lower()
    if confirm not in ['o', 'oui', 'y', 'yes']:
        return False
    
    # Cr√©er les dossiers
    created_files = []
    for file_path in structure.keys():
        path = Path(file_path)
        path.parent.mkdir(parents=True, exist_ok=True)
        
        # Cr√©er un fichier de base avec la structure
        if not path.exists():
            content = create_base_file_content(path, structure[file_path])
            path.write_text(content, encoding='utf-8')
            created_files.append(path)
            print(f"‚úÖ Cr√©√©: {path}")
        
        # Cr√©er __init__.py si n√©cessaire
        init_file = path.parent / "__init__.py"
        if not init_file.exists():
            init_file.write_text('"""Module init file"""', encoding='utf-8')
    
    print(f"\nüéâ {len(created_files)} fichiers cr√©√©s!")
    print("üìã Prochaines √©tapes:")
    print("   1. D√©placer le code appropri√© dans chaque fichier")
    print("   2. Mettre √† jour les imports")
    print("   3. Tester la refactorisation")
    
    return True


def create_base_file_content(file_path: Path, description: str) -> str:
    """Cr√©e le contenu de base pour un nouveau fichier"""
    class_name = file_path.stem.title().replace('_', '')
    
    if 'dialog' in file_path.name:
        template = f'''"""
{description}
"""
from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLabel
from PyQt6.QtCore import Qt

class {class_name}(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("{description}")
        self.init_ui()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        layout = QVBoxLayout()
        
        # TODO: Ajouter les composants UI
        label = QLabel("{description}")
        layout.addWidget(label)
        
        self.setLayout(layout)
'''
    
    elif 'widget' in file_path.name or 'panel' in file_path.name:
        template = f'''"""
{description}
"""
from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel

class {class_name}(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        layout = QVBoxLayout()
        
        # TODO: Ajouter les composants UI
        label = QLabel("{description}")
        layout.addWidget(label)
        
        self.setLayout(layout)
'''
    
    elif 'controller' in file_path.name:
        template = f'''"""
{description}
"""
from PyQt6.QtCore import QObject, pyqtSignal

class {class_name}(QObject):
    # Signaux
    status_changed = pyqtSignal(str)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup()
    
    def setup(self):
        """Configuration initiale"""
        # TODO: Initialisation du contr√¥leur
        pass
'''
    
    elif 'manager' in file_path.name or 'service' in file_path.name:
        template = f'''"""
{description}
"""
from PyQt6.QtCore import QObject, pyqtSignal

class {class_name}(QObject):
    # Signaux
    operation_completed = pyqtSignal(bool, str)  # success, message
    
    def __init__(self):
        super().__init__()
        self.setup()
    
    def setup(self):
        """Configuration initiale"""
        # TODO: Initialisation du service
        pass
'''
    
    else:
        template = f'''"""
{description}
"""

class {class_name}:
    def __init__(self):
        """Initialisation de {class_name}"""
        # TODO: Impl√©mentation
        pass
'''
    
    return template


def main():
    """Fonction principale"""
    print("üîç ANALYSEUR ET REFACTORISATION AUTOMATIQUE")
    print("=" * 50)
    
    # Trouver tous les fichiers Python
    src_path = Path("src")
    if not src_path.exists():
        print("‚ùå Dossier 'src' non trouv√©. Ex√©cutez d'abord la migration.")
        return
    
    python_files = list(src_path.rglob("*.py"))
    if Path("main.py").exists():
        python_files.append(Path("main.py"))
    
    print(f"üìÑ {len(python_files)} fichiers Python trouv√©s")
    
    # Analyser les fichiers
    analyses = []
    for file_path in python_files:
        if file_path.name != "__init__.py":
            print(f"üîç Analyse: {file_path}")
            analysis = analyze_file(file_path)
            if analysis:
                analyses.append(analysis)
    
    # Afficher les r√©sultats
    print_analysis_results(analyses)
    
    # Proposer la refactorisation des gros fichiers
    big_files = [a for a in analyses if a.total_lines > 300]
    if big_files:
        print(f"\nüö® {len(big_files)} fichiers n√©cessitent une refactorisation")
        
        for analysis in big_files:
            print(f"\n" + "="*60)
            print(f"üìÑ {analysis.path.name} ({analysis.total_lines} lignes)")
            
            if analysis.refactoring_suggestions:
                print("üí° Suggestions:")
                for suggestion in analysis.refactoring_suggestions:
                    print(f"   ‚Ä¢ {suggestion}")
            
            refactor = input(f"\n‚ùì Refactoriser {analysis.path.name}? (o/N): ").lower()
            if refactor in ['o', 'oui', 'y', 'yes']:
                create_refactored_files(analysis)
    
    print(f"\n‚ú® Analyse termin√©e!")
    print(f"üìä R√©sum√©:")
    print(f"   ‚Ä¢ {len(analyses)} fichiers analys√©s")
    print(f"   ‚Ä¢ {len(big_files)} fichiers volumineux d√©tect√©s") 
    print(f"   ‚Ä¢ Ligne moyenne: {sum(a.total_lines for a in analyses) // len(analyses)}")


if __name__ == "__main__":
    main()