# src/ui/components/common_widgets.py
"""
Composants UI r√©utilisables pour l'application Toolbox
Centralise les widgets communs et leur styling
"""

from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, QPushButton, 
    QLabel, QTextEdit, QCheckBox, QProgressBar, QTableWidget,
    QTableWidgetItem, QHeaderView, QFrame
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QTextCharFormat, QColor
import time

from ...core.logger import log_info, log_debug


class VersionLabel(QLabel):
    """Label de version standardis√©"""
    
    def __init__(self, version="Alpha 0.0.6", developer="ocrano"):
        super().__init__(f"{version} ‚Ä¢ by {developer}")
        self.setStyleSheet("color: #6c757d; font-size: 10px; font-style: italic;")


class ConnectionStatusWidget(QWidget):
    """Widget de statut de connexion r√©utilisable"""
    
    def __init__(self, service_name="Service"):
        super().__init__()
        self.service_name = service_name
        self.init_ui()
    
    def init_ui(self):
        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        
        self.status_label = QLabel("‚ùå Non connect√©")
        self.status_label.setFixedWidth(120)
        
        self.info_label = QLabel("")  # üîß Initialiser AVANT d'appeler update_status
        self.info_label.setStyleSheet("color: #495057; font-size: 12px; margin-left: 10px;")
        
        layout.addWidget(self.status_label)
        layout.addWidget(self.info_label)
        layout.addStretch()
        
        self.setLayout(layout)
        
        # üîß Maintenant on peut appeler update_status en toute s√©curit√©
        self.update_status(False)
    
    def update_status(self, connected, info_text=""):
        """Met √† jour le statut de connexion"""
        if connected:
            self.status_label.setText("‚úÖ Connect√©")
            self.status_label.setStyleSheet("""
                QLabel {
                    padding: 6px 10px;
                    border-radius: 4px;
                    background-color: #d4edda;
                    color: #155724;
                    font-weight: bold;
                    font-size: 12px;
                }
            """)
        else:
            self.status_label.setText("‚ùå Non connect√©")
            self.status_label.setStyleSheet("""
                QLabel {
                    padding: 6px 10px;
                    border-radius: 4px;
                    background-color: #f8d7da;
                    color: #721c24;
                    font-weight: bold;
                    font-size: 12px;
                }
            """)
        
        self.info_label.setText(info_text)


class ActionButton(QPushButton):
    """Bouton d'action stylis√© avec couleurs par cat√©gorie"""
    
    COLORS = {
        'primary': '#007bff',
        'success': '#28a745',
        'info': '#17a2b8',
        'warning': '#ffc107',
        'danger': '#dc3545',
        'secondary': '#6c757d',
        'purple': '#6f42c1',
        'orange': '#fd7e14',
        'pink': '#e83e8c'
    }
    
    def __init__(self, text, color='primary', icon=""):
        super().__init__(f"{icon} {text}" if icon else text)
        self.color = color
        self.apply_style()
    
    def apply_style(self):
        """Applique le style selon la couleur"""
        base_color = self.COLORS.get(self.color, self.COLORS['primary'])
        hover_color = self._darken_color(base_color)
        
        self.setStyleSheet(f"""
            QPushButton {{
                background-color: {base_color};
                color: white;
                border: none;
                padding: 12px;
                border-radius: 5px;
                font-weight: bold;
                text-align: left;
                font-size: 13px;
            }}
            QPushButton:hover {{
                background-color: {hover_color};
            }}
            QPushButton:disabled {{
                background-color: #6c757d;
            }}
        """)
    
    def _darken_color(self, hex_color):
        """Assombrit une couleur hexad√©cimale"""
        hex_color = hex_color.lstrip('#')
        rgb = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))
        darkened = tuple(max(0, int(c * 0.8)) for c in rgb)
        return f"#{''.join(f'{c:02x}' for c in darkened)}"


class LogDisplay(QTextEdit):
    """Zone d'affichage des logs avec coloration automatique"""
    
    def __init__(self, title="Logs"):
        super().__init__()
        self.title = title
        self.all_logs = []
        self.log_filters = {
            'DEBUG': False,
            'INFO': True,
            'WARNING': True,
            'ERROR': True,
            'SUCCESS': True
        }
        
        self.init_ui()
        self.add_welcome_message()
    
    def init_ui(self):
        """Initialise l'apparence"""
        self.setReadOnly(True)
        self.setFont(QFont("Consolas", 10))
        self.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #e0e0e0;
                border: 1px solid #555;
                border-radius: 6px;
                padding: 15px;
                line-height: 1.4;
                font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            }
        """)
    
    def add_welcome_message(self):
        """Ajoute le message de bienvenue"""
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        
        # En-t√™te
        format_header = QTextCharFormat()
        format_header.setForeground(QColor("#74c0fc"))
        format_header.setFontWeight(QFont.Weight.Bold)
        cursor.setCharFormat(format_header)
        cursor.insertText("=" * 80 + "\n")
        cursor.insertText(f"                        {self.title.upper()} - SESSION STARTED\n")
        cursor.insertText("=" * 80 + "\n\n")
        
        # Messages syst√®me
        format_system = QTextCharFormat()
        format_system.setForeground(QColor("#51cf66"))
        cursor.setCharFormat(format_system)
        cursor.insertText(f"SYSTEM: Welcome to {self.title}\n")
        cursor.insertText("SYSTEM: Real-time logging with color coding\n")
        cursor.insertText("SYSTEM: Use filters to control display\n\n")
    
    def add_log(self, message, level="INFO"):
        """Ajoute un log color√©"""
        # Sauvegarder dans la liste compl√®te
        self.all_logs.append((message, level))
        
        # V√©rifier les filtres
        if not self.log_filters.get(level, True):
            return
        
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        
        format = QTextCharFormat()
        
        if level == "SUCCESS":
            format.setForeground(QColor("#51cf66"))
            format.setFontWeight(QFont.Weight.Bold)
        elif level == "ERROR":
            format.setForeground(QColor("#ff6b6b"))
            format.setFontWeight(QFont.Weight.Bold)
        elif level == "WARNING":
            format.setForeground(QColor("#ffd43b"))
        elif level == "DEBUG":
            format.setForeground(QColor("#868e96"))
        else:  # INFO
            format.setForeground(QColor("#74c0fc"))
        
        cursor.setCharFormat(format)
        timestamp = time.strftime("%H:%M:%S")
        cursor.insertText(f"[{timestamp}] {level} | {message}\n")
        
        # Auto-scroll
        scrollbar = self.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def update_filter(self, level, enabled):
        """Met √† jour un filtre et rafra√Æchit l'affichage"""
        self.log_filters[level] = enabled
        self.refresh_display()
    
    def refresh_display(self):
        """Rafra√Æchit l'affichage selon les filtres"""
        # Sauvegarder la position de scroll
        scrollbar = self.verticalScrollBar()
        was_at_bottom = scrollbar.value() == scrollbar.maximum()
        
        # Vider et r√©afficher
        self.clear()
        self.add_welcome_message()
        
        for message, level in self.all_logs:
            if self.log_filters.get(level, True):
                self.add_log(message, level)
        
        # Restaurer le scroll
        if was_at_bottom:
            scrollbar.setValue(scrollbar.maximum())
    
    def clear_logs(self):
        """Efface tous les logs"""
        self.clear()
        self.all_logs = []
        self.add_welcome_message()
        
        # Message de nettoyage
        cursor = self.textCursor()
        cursor.movePosition(cursor.MoveOperation.End)
        format = QTextCharFormat()
        format.setForeground(QColor("#ffd43b"))
        cursor.setCharFormat(format)
        timestamp = time.strftime("%H:%M:%S")
        cursor.insertText(f"[{timestamp}] SYSTEM | Logs cleared by user\n\n")


class LogControlPanel(QWidget):
    """Panneau de contr√¥le pour les logs (filtres + boutons)"""
    
    filter_changed = pyqtSignal(str, bool)  # level, enabled
    export_requested = pyqtSignal()
    clear_requested = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.init_ui()
    
    def init_ui(self):
        layout = QHBoxLayout()
        layout.setContentsMargins(5, 2, 5, 2)
        
        # Filtres
        filters_group = QGroupBox("Filtres")
        filters_layout = QHBoxLayout()
        filters_layout.setContentsMargins(5, 2, 5, 2)
        
        # Checkboxes de filtres
        filter_configs = [
            ('DEBUG', False, '#868e96'),
            ('INFO', True, '#74c0fc'),
            ('WARNING', True, '#ffd43b'),
            ('ERROR', True, '#ff6b6b'),
            ('SUCCESS', True, '#51cf66')
        ]
        
        for level, checked, color in filter_configs:
            checkbox = QCheckBox(level)
            checkbox.setChecked(checked)
            checkbox.setStyleSheet(f"color: {color}; font-size: 11px;")
            checkbox.toggled.connect(lambda state, l=level: self.filter_changed.emit(l, state))
            filters_layout.addWidget(checkbox)
        
        filters_group.setLayout(filters_layout)
        filters_group.setMaximumHeight(50)
        layout.addWidget(filters_group)
        
        layout.addStretch()
        
        # Boutons d'action
        self.export_btn = QPushButton("üíæ Exporter")
        self.export_btn.clicked.connect(self.export_requested.emit)
        self.export_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 3px;
                font-size: 12px;
                margin-right: 5px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        layout.addWidget(self.export_btn)
        
        self.clear_btn = QPushButton("üóëÔ∏è Effacer")
        self.clear_btn.clicked.connect(self.clear_requested.emit)
        self.clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #dc3545;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 3px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #c82333;
            }
        """)
        layout.addWidget(self.clear_btn)
        
        self.setLayout(layout)


    def create_filter_handler(self, level):
        """Cr√©e un gestionnaire s√ªr pour chaque filtre"""
        def handler(checked):
            try:
                self.filter_changed.emit(level, checked)
            except Exception as e:
                print(f"Erreur filtre {level}: {e}")
        return handler



class StatusTable(QTableWidget):
    """Tableau de statut stylis√©"""
    
    def __init__(self, headers):
        super().__init__()
        self.setColumnCount(len(headers))
        self.setHorizontalHeaderLabels(headers)
        self.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.setAlternatingRowColors(True)
        
        # Style du tableau
        self.setStyleSheet("""
            QTableWidget {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 4px;
                gridline-color: #dee2e6;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #dee2e6;
            }
            QTableWidget::item:selected {
                background-color: #007bff;
                color: white;
            }
            QHeaderView::section {
                background-color: #e9ecef;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #dee2e6;
                font-weight: bold;
            }
        """)
        
        # Auto-resize des colonnes
        header = self.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        header.setStretchLastSection(True)
    
    def add_status_row(self, data, status_column=None, status_value=None):
        """Ajoute une ligne avec coloration de statut"""
        row = self.rowCount()
        self.insertRow(row)
        
        for col, value in enumerate(data):
            item = QTableWidgetItem(str(value))
            
            # Coloration selon le statut
            if status_column is not None and col == status_column:
                if "‚úÖ" in str(value) or "Connect√©" in str(value) or "Actif" in str(value):
                    item.setBackground(QColor("#d4edda"))
                elif "‚ùå" in str(value) or "Non connect√©" in str(value) or "Inactif" in str(value):
                    item.setBackground(QColor("#f8d7da"))
                elif "‚ö†Ô∏è" in str(value) or "Attention" in str(value):
                    item.setBackground(QColor("#fff3cd"))
            
            self.setItem(row, col, item)


class ProgressWidget(QWidget):
    """Widget de progression avec message"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        
        self.status_label = QLabel("Pr√™t")
        self.status_label.setStyleSheet("color: #6c757d; font-style: italic; padding: 4px;")
        
        layout.addWidget(self.progress_bar)
        layout.addWidget(self.status_label)
        
        self.setLayout(layout)
    
    def start_progress(self, message="En cours..."):
        """D√©marre la progression ind√©termin√©e"""
        self.progress_bar.setRange(0, 0)  # Mode ind√©termin√©
        self.progress_bar.setVisible(True)
        self.status_label.setText(message)
    
    def set_progress(self, value, maximum=100, message=""):
        """D√©finit une progression d√©termin√©e"""
        self.progress_bar.setRange(0, maximum)
        self.progress_bar.setValue(value)
        self.progress_bar.setVisible(True)
        if message:
            self.status_label.setText(message)
    
    def stop_progress(self, message="Termin√©"):
        """Arr√™te la progression"""
        self.progress_bar.setVisible(False)
        self.status_label.setText(message)


class SectionHeader(QWidget):
    """En-t√™te de section avec titre et version"""
    
    def __init__(self, title, icon="", version_widget=None):
        super().__init__()
        self.init_ui(title, icon, version_widget)
    
    def init_ui(self, title, icon, version_widget):
        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 10)
        
        # Titre avec ic√¥ne
        title_text = f"{icon} {title}" if icon else title
        title_label = QLabel(title_text)
        title_label.setStyleSheet("font-size: 14px; font-weight: bold;")
        layout.addWidget(title_label)
        
        layout.addStretch()
        
        # Widget de version (optionnel)
        if version_widget is None:
            version_widget = VersionLabel()
        layout.addWidget(version_widget)
        
        self.setLayout(layout)


class ConfigurationGroup(QGroupBox):
    """Groupe de configuration standardis√©"""
    
    def __init__(self, title, icon="üîó"):
        super().__init__(f"{icon} {title}")
        self.setMaximumHeight(80)
        self.init_style()
    
    def init_style(self):
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                margin-top: 8px;
                padding-top: 12px;
                background-color: #f8f9fa;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 8px;
                padding: 0 4px 0 4px;
                color: #495057;
            }
        """)


class ActionGrid(QWidget):
    """Grille d'actions organis√©e par groupes"""
    
    def __init__(self):
        super().__init__()
        self.layout = QVBoxLayout()
        self.groups = {}
        self.setLayout(self.layout)
    
    def add_group(self, group_name, icon="üõ†Ô∏è"):
        """Ajoute un groupe d'actions"""
        group = QGroupBox(f"{icon} {group_name}")
        group_layout = QVBoxLayout()
        group.setLayout(group_layout)
        
        self.groups[group_name] = group_layout
        self.layout.addWidget(group)
        
        return group_layout
    
    def add_action_to_group(self, group_name, button):
        """Ajoute un bouton √† un groupe"""
        if group_name in self.groups:
            self.groups[group_name].addWidget(button)
    
    def enable_group(self, group_name, enabled=True):
        """Active/d√©sactive tous les boutons d'un groupe"""
        if group_name in self.groups:
            layout = self.groups[group_name]
            for i in range(layout.count()):
                widget = layout.itemAt(i).widget()
                if isinstance(widget, QPushButton):
                    widget.setEnabled(enabled)


# Factory pour cr√©er des widgets standardis√©s
class WidgetFactory:
    """Factory pour cr√©er des widgets standardis√©s"""
    
    @staticmethod
    def create_config_button(text, color='primary', icon="‚öôÔ∏è"):
        """Cr√©e un bouton de configuration"""
        btn = ActionButton(text, color, icon)
        btn.setFixedWidth(140)
        return btn
    
    @staticmethod
    def create_info_label(text=""):
        """Cr√©e un label d'information"""
        label = QLabel(text)
        label.setStyleSheet("color: #495057; font-size: 12px; margin-left: 10px;")
        return label
    
    @staticmethod
    def create_separator():
        """Cr√©e un s√©parateur horizontal"""
        line = QFrame()
        line.setFrameShape(QFrame.Shape.HLine)
        line.setFrameShadow(QFrame.Shadow.Sunken)
        line.setStyleSheet("color: #dee2e6;")
        return line
    
    @staticmethod
    def create_card(title, content_widget):
        """Cr√©e une carte avec titre et contenu"""
        card = QFrame()
        card.setFrameStyle(QFrame.Shape.Box)
        card.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #dee2e6;
                border-radius: 8px;
                padding: 16px;
            }
        """)
        
        layout = QVBoxLayout()
        
        # Titre de la carte
        title_label = QLabel(title)
        title_label.setStyleSheet("font-size: 16px; font-weight: bold; margin-bottom: 10px;")
        layout.addWidget(title_label)
        
        # Contenu
        layout.addWidget(content_widget)
        
        card.setLayout(layout)
        return card


# Composant pour l'affichage des m√©triques
class MetricsDisplay(QWidget):
    """Affichage de m√©triques avec ic√¥nes et couleurs"""
    
    def __init__(self):
        super().__init__()
        self.metrics = {}
        self.layout = QHBoxLayout()
        self.setLayout(self.layout)
    
    def add_metric(self, name, value, icon="üìä", color="#17a2b8"):
        """Ajoute une m√©trique"""
        metric_widget = QWidget()
        metric_layout = QVBoxLayout()
        metric_layout.setContentsMargins(10, 5, 10, 5)
        
        # Ic√¥ne + valeur
        value_label = QLabel(f"{icon} {value}")
        value_label.setStyleSheet(f"""
            font-size: 18px; 
            font-weight: bold; 
            color: {color};
            text-align: center;
        """)
        
        # Nom de la m√©trique
        name_label = QLabel(name)
        name_label.setStyleSheet("""
            font-size: 12px; 
            color: #6c757d;
            text-align: center;
        """)
        
        metric_layout.addWidget(value_label)
        metric_layout.addWidget(name_label)
        metric_widget.setLayout(metric_layout)
        
        # Style de la carte
        metric_widget.setStyleSheet("""
            QWidget {
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 6px;
                margin: 2px;
            }
        """)
        
        self.metrics[name] = value_label
        self.layout.addWidget(metric_widget)
    
    def update_metric(self, name, value, icon="üìä"):
        """Met √† jour une m√©trique"""
        if name in self.metrics:
            self.metrics[name].setText(f"{icon} {value}")
    
    def clear_metrics(self):
        """Efface toutes les m√©triques"""
        for i in reversed(range(self.layout.count())):
            child = self.layout.itemAt(i).widget()
            if child:
                child.setParent(None)
        self.metrics.clear()


# Export des composants principaux
__all__ = [
    'VersionLabel',
    'ConnectionStatusWidget', 
    'ActionButton',
    'LogDisplay',
    'LogControlPanel',
    'StatusTable',
    'ProgressWidget',
    'SectionHeader',
    'ConfigurationGroup',
    'ActionGrid',
    'WidgetFactory',
    'MetricsDisplay'
]